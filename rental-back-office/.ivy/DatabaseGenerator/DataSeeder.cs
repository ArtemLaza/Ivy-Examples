/*
This code was generated by an AI model for seeding a database using the Bogus library. 
When debugging read 'DataContext.cs' first to understand the structure of the database.
Your primary goal is to make the generated code compile and run successfully. 
If you fail you are allowed to regenerate the code and/or comment out functionality, but only as a last resort.
*/

using Bogus;
using Microsoft.EntityFrameworkCore;
using RentalBackOffice;

namespace RentalBackOffice;

public class DataSeeder : IDataSeeder
{
    private readonly DataContext _context;

    public DataSeeder(DataContext context)
    {
        _context = context;
    }

    public async Task SeedAsync()
    {
        // ReservationStatus is already seeded in the model using HasData()

        var faker = new Faker();

        var amenities = new[]
        {
            new Amenity { Name = "WiFi", CreatedAt = faker.Date.Past(2), UpdatedAt = faker.Date.Past(1) },
            new Amenity { Name = "Air Conditioning", CreatedAt = faker.Date.Past(2), UpdatedAt = faker.Date.Past(1) },
            new Amenity { Name = "Heating", CreatedAt = faker.Date.Past(2), UpdatedAt = faker.Date.Past(1) },
            new Amenity { Name = "Kitchen", CreatedAt = faker.Date.Past(2), UpdatedAt = faker.Date.Past(1) },
            new Amenity { Name = "Parking", CreatedAt = faker.Date.Past(2), UpdatedAt = faker.Date.Past(1) },
            new Amenity { Name = "Laundry", CreatedAt = faker.Date.Past(2), UpdatedAt = faker.Date.Past(1) },
            new Amenity { Name = "Pool", CreatedAt = faker.Date.Past(2), UpdatedAt = faker.Date.Past(1) },
            new Amenity { Name = "Gym", CreatedAt = faker.Date.Past(2), UpdatedAt = faker.Date.Past(1) },
        };
        _context.Amenities.AddRange(amenities);
        await _context.SaveChangesAsync();

        var users = new Faker<User>()
            .RuleFor(u => u.FirstName, f => f.Name.FirstName())
            .RuleFor(u => u.LastName, f => f.Name.LastName())
            .RuleFor(u => u.Email, f => f.Internet.Email())
            .RuleFor(u => u.PasswordHash, f => f.Internet.Password())
            .RuleFor(u => u.Phone, f => f.Phone.PhoneNumber())
            .RuleFor(u => u.IsHost, f => f.Random.Bool(0.5f))
            .RuleFor(u => u.CreatedAt, f => f.Date.Past(5))
            .RuleFor(u => u.UpdatedAt, (f, u) => f.Date.Between(u.CreatedAt, DateTime.UtcNow))
            .Generate(50);
        _context.Users.AddRange(users);
        await _context.SaveChangesAsync();

        var hosts = users.Where(u => u.IsHost).ToList();
        var listings = new Faker<Listing>()
            .RuleFor(l => l.HostId, f => f.PickRandom(hosts).Id)
            .RuleFor(l => l.Title, f => f.Lorem.Sentence(3))
            .RuleFor(l => l.Description, f => f.Lorem.Paragraph(2))
            .RuleFor(l => l.AddressLine1, f => f.Address.StreetAddress())
            .RuleFor(l => l.AddressLine2, f => f.Address.SecondaryAddress())
            .RuleFor(l => l.City, f => f.Address.City())
            .RuleFor(l => l.State, f => f.Address.State())
            .RuleFor(l => l.Country, f => f.Address.Country())
            .RuleFor(l => l.PostalCode, f => f.Address.ZipCode())
            .RuleFor(l => l.Latitude, f => (decimal)f.Address.Latitude())
            .RuleFor(l => l.Longitude, f => (decimal)f.Address.Longitude())
            .RuleFor(l => l.PricePerNight, f => f.Random.Decimal(50, 500))
            .RuleFor(l => l.MaxGuests, f => f.Random.Int(1, 10))
            .RuleFor(l => l.NumBedrooms, f => f.Random.Int(1, 5))
            .RuleFor(l => l.NumBaths, f => f.Random.Int(1, 4))
            .RuleFor(l => l.CreatedAt, f => f.Date.Past(4))
            .RuleFor(l => l.UpdatedAt, (f, l) => f.Date.Between(l.CreatedAt, DateTime.UtcNow))
            .Generate(100);
        _context.Listings.AddRange(listings);
        await _context.SaveChangesAsync();

        var listingAmenities = new List<ListingAmenity>();
        foreach (var listing in listings)
        {
            var selectedAmenities = new HashSet<int>();
            var numAmenities = faker.Random.Int(1, amenities.Length);
            for (int i = 0; i < numAmenities && selectedAmenities.Count < amenities.Length; i++)
            {
                var amenity = faker.PickRandom(amenities);
                if (selectedAmenities.Add(amenity.Id))
                {
                    listingAmenities.Add(new ListingAmenity
                    {
                        ListingId = listing.Id,
                        AmenityId = amenity.Id
                    });
                }
            }
        }
        _context.ListingAmenities.AddRange(listingAmenities);
        await _context.SaveChangesAsync();

        var reservations = new Faker<Reservation>()
            .RuleFor(r => r.ListingId, f => f.PickRandom(listings).Id)
            .RuleFor(r => r.GuestId, f => f.PickRandom(users).Id)
            .RuleFor(r => r.StartDate, f => f.Date.Future(1))
            .RuleFor(r => r.EndDate, (f, r) => r.StartDate.AddDays(f.Random.Int(1, 14)))
            .RuleFor(r => r.TotalPrice, (f, r) => f.Random.Decimal(50, 500) * (decimal)(r.EndDate - r.StartDate).TotalDays)
            .RuleFor(r => r.StatusId, f => f.PickRandom(new[] { 1, 2, 3, 4 }))
            .RuleFor(r => r.CreatedAt, f => f.Date.Recent(30))
            .RuleFor(r => r.UpdatedAt, (f, r) => f.Date.Between(r.CreatedAt, DateTime.UtcNow))
            .Generate(200);
        _context.Reservations.AddRange(reservations);
        await _context.SaveChangesAsync();

        var reviews = new Faker<Review>()
            .RuleFor(rev => rev.ListingId, f => f.PickRandom(listings).Id)
            .RuleFor(rev => rev.GuestId, f => f.PickRandom(users).Id)
            .RuleFor(rev => rev.ReservationId, f => f.PickRandom(reservations).Id)
            .RuleFor(rev => rev.Rating, f => f.Random.Int(1, 5))
            .RuleFor(rev => rev.Comment, f => f.Lorem.Paragraph(1))
            .RuleFor(rev => rev.CreatedAt, f => f.Date.Recent(60))
            .RuleFor(rev => rev.UpdatedAt, (f, rev) => f.Date.Between(rev.CreatedAt, DateTime.UtcNow))
            .Generate(300);
        _context.Reviews.AddRange(reviews);
        await _context.SaveChangesAsync();

        var photos = new Faker<Photo>()
            .RuleFor(p => p.ListingId, f => f.PickRandom(listings).Id)
            .RuleFor(p => p.Url, f => f.Image.PicsumUrl(640, 480))
            .RuleFor(p => p.Description, f => f.Lorem.Sentence())
            .RuleFor(p => p.IsPrimary, f => f.Random.Bool())
            .RuleFor(p => p.CreatedAt, f => f.Date.Recent(90))
            .RuleFor(p => p.UpdatedAt, (f, p) => f.Date.Between(p.CreatedAt, DateTime.UtcNow))
            .Generate(600);
        _context.Photos.AddRange(photos);
        await _context.SaveChangesAsync();
    }
}